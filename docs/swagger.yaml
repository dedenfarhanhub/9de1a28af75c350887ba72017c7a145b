basePath: /
definitions:
  dto.AuthorResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.BaseResponse:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  dto.CommentRequest:
    properties:
      author_name:
        type: string
      content:
        type: string
    required:
    - author_name
    - content
    type: object
  dto.CommentResponse:
    properties:
      author_name:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
    type: object
  dto.PaginationResponse:
    properties:
      items: {}
      total_count:
        type: integer
    type: object
  dto.PostRequest:
    properties:
      author_id:
        type: integer
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  dto.PostResponse:
    properties:
      author:
        $ref: '#/definitions/dto.AuthorResponse'
      author_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      token:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8090
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for blog.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Blog API GO
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with the provided credentials
      parameters:
      - description: User login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: User login
      tags:
      - Users
  /posts:
    get:
      description: Retrieve all posts with filters
      parameters:
      - description: Search by title or content
        in: query
        name: search
        type: string
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: sort_order
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/dto.PaginationResponse'
                  - properties:
                      items:
                        items:
                          $ref: '#/definitions/dto.PostResponse'
                        type: array
                    type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get all posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new post with the given details
      parameters:
      - description: Post Request
        in: body
        name: postRequest
        required: true
        schema:
          $ref: '#/definitions/dto.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PostResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - Posts
  /posts/{id}:
    delete:
      description: Delete a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete a post by ID
      tags:
      - Posts
    get:
      description: Get details of a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PostResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get a post by ID
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post Request
        in: body
        name: postRequest
        required: true
        schema:
          $ref: '#/definitions/dto.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.PostResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - Posts
  /posts/{id}/comments:
    get:
      description: Retrieve all comments associated with a specific post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of comments per page
        in: query
        name: page_size
        type: integer
      - description: Search by comment content
        in: query
        name: search
        type: string
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/dto.PaginationResponse'
                  - properties:
                      items:
                        items:
                          $ref: '#/definitions/dto.CommentResponse'
                        type: array
                    type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Get all comments by post ID
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: Add a new comment to a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment details
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/dto.CommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CommentResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Create a new comment
      tags:
      - Comments
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.BaseResponse'
      summary: Register a new user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
